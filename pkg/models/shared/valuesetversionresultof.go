// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ValueSetVersionResultOf string

const (
	ValueSetVersionResultOfAppValueCreate            ValueSetVersionResultOf = "app_value_create"
	ValueSetVersionResultOfAppValueUpdate            ValueSetVersionResultOf = "app_value_update"
	ValueSetVersionResultOfAppValueDelete            ValueSetVersionResultOf = "app_value_delete"
	ValueSetVersionResultOfAppValuesDelete           ValueSetVersionResultOf = "app_values_delete"
	ValueSetVersionResultOfAppValueSetVersionRestore ValueSetVersionResultOf = "app_value_set_version_restore"
	ValueSetVersionResultOfAppValueSetVersionPurge   ValueSetVersionResultOf = "app_value_set_version_purge"
	ValueSetVersionResultOfEnvValueCreate            ValueSetVersionResultOf = "env_value_create"
	ValueSetVersionResultOfEnvValueUpdate            ValueSetVersionResultOf = "env_value_update"
	ValueSetVersionResultOfEnvValueDelete            ValueSetVersionResultOf = "env_value_delete"
	ValueSetVersionResultOfEnvValuesDelete           ValueSetVersionResultOf = "env_values_delete"
	ValueSetVersionResultOfEnvValueSetVersionRestore ValueSetVersionResultOf = "env_value_set_version_restore"
	ValueSetVersionResultOfEnvValueSetVersionPurge   ValueSetVersionResultOf = "env_value_set_version_purge"
)

func (e ValueSetVersionResultOf) ToPointer() *ValueSetVersionResultOf {
	return &e
}

func (e *ValueSetVersionResultOf) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "app_value_create":
		fallthrough
	case "app_value_update":
		fallthrough
	case "app_value_delete":
		fallthrough
	case "app_values_delete":
		fallthrough
	case "app_value_set_version_restore":
		fallthrough
	case "app_value_set_version_purge":
		fallthrough
	case "env_value_create":
		fallthrough
	case "env_value_update":
		fallthrough
	case "env_value_delete":
		fallthrough
	case "env_values_delete":
		fallthrough
	case "env_value_set_version_restore":
		fallthrough
	case "env_value_set_version_purge":
		*e = ValueSetVersionResultOf(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ValueSetVersionResultOf: %v", v)
	}
}
