// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"bytes"
	"encoding/json"
	"errors"
	"net/http"
	"test-1/pkg/models/shared"
)

type PostOrgsOrgIDAppsAppIDDeltasRequest struct {
	// A Deployment Delta to create.
	//
	// The Deployment Delta will be added with the provided content of `modules` and the 'env_id' and 'name' properties of the 'metadata' property.
	//
	// NOTE: If the `id` property is specified, it will be ignored. A new ID will be generated and returned in the response.
	DeltaRequest shared.DeltaRequest `request:"mediaType=application/json"`
	// The Application ID.
	//
	//
	AppID string `pathParam:"style=simple,explode=false,name=appId"`
	// The Organization ID.
	//
	//
	OrgID string `pathParam:"style=simple,explode=false,name=orgId"`
}

type PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONType string

const (
	PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONTypeStr           PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONType = "str"
	PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONTypeDeltaResponse PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONType = "DeltaResponse"
)

type PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON struct {
	Str           *string
	DeltaResponse *shared.DeltaResponse

	Type PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONType
}

func CreatePostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONStr(str string) PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON {
	typ := PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONTypeStr

	return PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON{
		Str:  &str,
		Type: typ,
	}
}

func CreatePostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONDeltaResponse(deltaResponse shared.DeltaResponse) PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON {
	typ := PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONTypeDeltaResponse

	return PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON{
		DeltaResponse: &deltaResponse,
		Type:          typ,
	}
}

func (u *PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON) UnmarshalJSON(data []byte) error {
	var d *json.Decoder

	str := new(string)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&str); err == nil {
		u.Str = str
		u.Type = PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONTypeStr
		return nil
	}

	deltaResponse := new(shared.DeltaResponse)
	d = json.NewDecoder(bytes.NewReader(data))
	d.DisallowUnknownFields()
	if err := d.Decode(&deltaResponse); err == nil {
		u.DeltaResponse = deltaResponse
		u.Type = PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONTypeDeltaResponse
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Str != nil {
		return json.Marshal(u.Str)
	}

	if u.DeltaResponse != nil {
		return json.Marshal(u.DeltaResponse)
	}

	return nil, nil
}

type PostOrgsOrgIDAppsAppIDDeltasResponse struct {
	ContentType string
	// The request was invalid.
	//
	//
	HumanitecErrorResponse *shared.HumanitecErrorResponse
	StatusCode             int
	RawResponse            *http.Response
	// The requested Deployment Delta.
	//
	//
	PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSONOneOf *PostOrgsOrgIDAppsAppIDDeltas200ApplicationJSON
}
